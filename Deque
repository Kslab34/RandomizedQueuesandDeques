package randomizedQueuesAndDeques;

import java.util.Iterator;
import java.util.NoSuchElementException;

public class Deque<Item> implements Iterable<Item> {

	private Node<Item> first = null;
	private Node<Item> last = null;
	private int size;

	/** helper linked list class*/
	private static class Node<Item> {
		private Item item;
		private Node<Item> next;
	}

	public Deque() { /** construct an empty deque*/

	}

	public boolean isEmpty() /** is the deque empty?*/
	{
		return size == 0;
	}

	public int size() /** return the number of items on the deque*/
	{
		return size;
	}

	public void addFirst(Item item) /** insert the item at the front*/
	{
		Node<Item> oldfirst = first;
		first = new Node<Item>();
		first.item = item;
		if(isEmpty()){
			last = first;
		}
		first.next = oldfirst;
		size++;
	}

	public void addLast(Item item) /** insert the item at the end*/
	{
		Node<Item> oldlast = last;
		last = new Node<Item>();
		last.item = item;
		last.next = null;
		if (isEmpty()){
			first = last;
		}
		else{
			oldlast.next = last;
		}
		size++;
	}

	public Item removeFirst() /** delete and return the item at the front*/
	{
		if (isEmpty())
			throw new NoSuchElementException("Dequeue underflow");
		Item item = first.item; /** save item to return*/
		first = first.next; /** delete first node*/
		size--;
		return item; /** return the saved item*/
	}

	public Item removeLast() /** delete and return the item at the end*/
	{
		if (isEmpty())
			throw new NoSuchElementException("Dequeue underflow");
		Item item = first.item;
		first = first.next;
		size--;
		if (isEmpty())
			last = null; /** to avoid loitering*/
		return item;
	}

	public static void main(String[] args) /** unit testing*/
	{
		Deque<Integer> dq = new Deque<>();
		dq.addFirst(15);
		dq.addFirst(16);
		dq.addLast(20);
		dq.addFirst(17);
		dq.addLast(25);
		
		dq.removeFirst();
		dq.removeLast();

		for (Integer e : dq) {
			System.out.println(e);
		}

	}

	@Override
	public Iterator<Item> iterator() { /** return an iterator over items in order*/
		/** from front to end*/
		return new ListIterator<Item>(first);
	}

	/** an iterator, doesn't implement remove() since it's optional*/
	private class ListIterator<Item> implements Iterator<Item> {
		private Node<Item> current;

		public ListIterator(Node<Item> first) {
			current = first;
		}

		public boolean hasNext() {
			return current != null;
		}

		public void remove() {
			throw new UnsupportedOperationException();
		}

		public Item next() {
			if (!hasNext())
				throw new NoSuchElementException();
			Item item = current.item;
			current = current.next;
			return item;
		}
	}
}
